«IMPORT soot::jimple::toolkits::javaee::model::servlet»
«IMPORT soot::jimple::toolkits::javaee::model::ws»

«IMPORT soot»
«EXTENSION soot::jimple::toolkits::javaee::templates::ws::Utils»
«EXTENSION soot::jimple::toolkits::javaee::templates::Utils»

«DEFINE main FOR Web»
«EXPAND wsServlet(this) FOREACH servlets»
«ENDDEFINE»

«DEFINE wsServlet(Web web) FOR Servlet»
«ENDDEFINE»

«DEFINE wsServlet(Web web) FOR WsServlet»
«FOREACH (List[WebService])services() AS service»
«FILE service.wrapperName+".jimple"»
public class «service.wrapperName» extends java.lang.Object
{
«REM» ----------------- Iterate over all service methods -------------------- «ENDREM -»
«FOREACH (List[WebMethod])service.methods() AS method-»

«REM» ----------------- Generate synchronous call wrapper -------------------- «ENDREM -»
«REM» N.B. If the service already has Async methods, then this code generates them too «ENDREM -»
«IF method.retType.isVoid() -»
  public static «method.retType.quoteIfNeeded()» '«method.name»'(«FOREACH method.argTypes() AS param SEPARATOR ','»«param.quoteIfNeeded()»«ENDFOREACH»)
  {
«FOREACH (List[Type])method.argTypes() AS param ITERATOR iter -»
    «param.quoteIfNeeded()» «param.localPrefix()»«iter.counter0»;
«ENDFOREACH -»
    «service.implementationName()» '$wsl«toIdentifier(service)»';
«FOREACH (List[Type])method.argTypes() AS param ITERATOR iter-»
    «param.localPrefix()»«iter.counter0» := @parameter«iter.counter0»: «param.quoteIfNeeded()»;
«ENDFOREACH-»
    '$wsl«toIdentifier(service)»' = <«clazz»: «service.implementationName()» ws«toIdentifier(service)»>;
    virtualinvoke '$wsl«toIdentifier(service)»'.<«service.implementationName()»: «method.retType.quoteIfNeeded()» '«method.targetMethodName»'(«FOREACH method.argTypes() AS param ITERATOR iter SEPARATOR ','»«param.quoteIfNeeded()»«ENDFOREACH»)>(«FOREACH (List[Type])method.argTypes() AS param ITERATOR iter SEPARATOR ','»«param.localPrefix()»«iter.counter0»«ENDFOREACH»);
    return;
  }
«ELSE»
  public static «method.retType.quoteIfNeeded()» '«method.name»'(«FOREACH method.argTypes() AS param SEPARATOR ','»«param.quoteIfNeeded()»«ENDFOREACH»)
  {
«FOREACH (List[Type])method.argTypes() AS param ITERATOR iter-»
    «param.quoteIfNeeded()» «param.localPrefix()»«iter.counter0»;
«ENDFOREACH-»
    «service.implementationName()» '$wsl«toIdentifier(service)»';
    «method.retType.quoteIfNeeded()» $retVal;
«FOREACH (List[Type])method.argTypes() AS param ITERATOR iter»
    «param.localPrefix()»«iter.counter0» := @parameter«iter.counter0»: «param.quoteIfNeeded()»;
«ENDFOREACH-»
    '$wsl«toIdentifier(service)»' = <«clazz»: «service.implementationName()» ws«toIdentifier(service)»>;
    $retVal = virtualinvoke '$wsl«toIdentifier(service)»'.<«service.implementationName()»: «method.retType.quoteIfNeeded()» '«method.targetMethodName»'(«FOREACH method.argTypes() AS param ITERATOR iter SEPARATOR ','»«param.quoteIfNeeded()»«ENDFOREACH»)>(«FOREACH (List[Type])method.argTypes() AS param ITERATOR iter SEPARATOR ','»«param.localPrefix()»«iter.counter0»«ENDFOREACH»);
    return $retVal;
  }
«ENDIF»

«IF !service.hasAsyncAlready && method.retType.isObject() -»
«REM» ----------------- TODO handle basic types. We need boxing/unboxing logic for those -------------------- «ENDREM»
«REM» ----------------- Generate asynchronous call wrappers -------------------- «ENDREM»
  public static javax.xml.ws.Response '«method.name»Async'(«FOREACH method.argTypes() AS param SEPARATOR ','»«param.quoteIfNeeded()»«ENDFOREACH»)
  {
«FOREACH (List[Type])method.argTypes() AS param ITERATOR iter -»
    «param.quoteIfNeeded()» «param.localPrefix()»«iter.counter0»;
«ENDFOREACH -»
    «service.implementationName()» '$wsl«toIdentifier(service)»';
    «method.retType.quoteIfNeeded()» $retVal;
    'soot.javaee.FutureWrapper' $wrapRet;

«FOREACH (List[Type])method.argTypes() AS param ITERATOR iter»
    «param.localPrefix()»«iter.counter0» := @parameter«iter.counter0»: «param.quoteIfNeeded()»;
«ENDFOREACH-»
    '$wsl«toIdentifier(service)»' = <«clazz»: «service.implementationName()» ws«toIdentifier(service)»>;
    $retVal = virtualinvoke '$wsl«toIdentifier(service)»'.<«service.implementationName()»: «method.retType.quoteIfNeeded()» '«method.targetMethodName»'(«FOREACH method.argTypes() AS param ITERATOR iter SEPARATOR ','»«param.quoteIfNeeded()»«ENDFOREACH»)>(«FOREACH (List[Type])method.argTypes() AS param ITERATOR iter SEPARATOR ','»«param.localPrefix()»«iter.counter0»«ENDFOREACH»);
    $wrapRet = new 'soot.javaee.FutureWrapper';
    specialinvoke $wrapRet.<'soot.javaee.FutureWrapper': void <init>('java.lang.Object')>($retVal);
    return $wrapRet;
  }

«REM» ----------------- Generate asynchronous call wrappers with callbacks -------------------- «ENDREM»
«IF method.argTypes().size == 0»
  public static java.util.concurrent.Future '«method.name»Async'(javax.xml.ws.AsyncHandler)
  {
«ELSE»
  public static java.util.concurrent.Future '«method.name»Async'(«FOREACH method.argTypes() AS param SEPARATOR ','»«param.quoteIfNeeded()»«ENDFOREACH»,javax.xml.ws.AsyncHandler)
  {
«ENDIF» «REM»End argTypes empty«ENDREM»
«FOREACH (List[Type])method.argTypes() AS param ITERATOR iter -»
    «param.quoteIfNeeded()» «param.localPrefix()»«iter.counter0»;
«ENDFOREACH -»
    'javax.xml.ws.AsyncHandler' handler;
    «service.implementationName()» '$wsl«toIdentifier(service)»';
    «method.retType.quoteIfNeeded()» $retVal;
    'soot.javaee.FutureWrapper' $wrapRet;

«FOREACH (List[Type])method.argTypes() AS param ITERATOR iter -»
    «param.localPrefix()»«iter.counter0» := @parameter«iter.counter0»: «param.quoteIfNeeded()»;
«ENDFOREACH -»
    handler := @parameter«method.argTypes().size»: 'javax.xml.ws.AsyncHandler';

    '$wsl«toIdentifier(service)»' = <«clazz»: «service.implementationName()» ws«toIdentifier(service)»>;
    $retVal = virtualinvoke '$wsl«toIdentifier(service)»'.<«service.implementationName()»: «method.retType.quoteIfNeeded()» '«method.targetMethodName»'(«FOREACH method.argTypes() AS param ITERATOR iter SEPARATOR ','»«param.quoteIfNeeded()»«ENDFOREACH»)>(«FOREACH (List[Type])method.argTypes() AS param ITERATOR iter SEPARATOR ','»«param.localPrefix()»«iter.counter0»«ENDFOREACH»);
    $wrapRet = new soot.javaee.FutureWrapper;
    specialinvoke $wrapRet.<soot.javaee.FutureWrapper: void <init>(java.lang.Object)>($retVal);
    interfaceinvoke handler.<javax.xml.ws.AsyncHandler: void handleResponse(javax.xml.ws.Response)>($wrapRet);
    return $wrapRet;
  }
«ENDIF-» «REM»End of if over hasAsyncAlready «ENDREM»
«ENDFOREACH-»
}
«ENDFILE»
«ENDFOREACH»
«ENDDEFINE»