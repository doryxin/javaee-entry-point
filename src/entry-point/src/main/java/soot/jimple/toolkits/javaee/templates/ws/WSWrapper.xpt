«IMPORT soot::jimple::toolkits::javaee::model::servlet»
«IMPORT soot::jimple::toolkits::javaee::model::ws»

«IMPORT soot»
«IMPORT soot::jimple::toolkits::javaee::templates::beans»

«EXTENSION soot::jimple::toolkits::javaee::templates::ws::Utils»


«DEFINE main FOR Web»
«EXPAND wsServlet(this) FOREACH servlets»
«ENDDEFINE»

«DEFINE wsServlet(Web web) FOR Servlet»
«ENDDEFINE»

«DEFINE wsServlet(Web web) FOR WsServlet»
«EXPAND BeanFactory::beanFactory(clazz) FOR this.collectParameterTypes()»
«FILE clazz + ".jimple"»
public class «clazz» extends javax.servlet.http.HttpServlet
{
«FOREACH (List[WebService])services() AS service»
    public static final «service.implementationName()» ws«toIdentifier(service)»;
«ENDFOREACH»

    static void <clinit>()
    {
«FOREACH (List[WebService])services() AS service ITERATOR iter»
       «service.implementationName()» $r«iter.counter1»;
«ENDFOREACH»
«FOREACH (List[WebService])services() AS service ITERATOR iter»
       $r«iter.counter1» = new «service.implementationName()»;
       specialinvoke $r«iter.counter1».<«service.implementationName()»: void <init>()>();
«ENDFOREACH»

«FOREACH (List[WebService])services() AS service ITERATOR iter»
       <«clazz»: «service.implementationName()» ws«toIdentifier(service)»> = $r«iter.counter1»;
«ENDFOREACH»
        return;
    }

    void <init>()
    {
        «clazz» r0;

        r0 := @this: «clazz»;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        return;
    }

    void service(javax.servlet.ServletRequest, javax.servlet.ServletResponse)
    {
        «clazz» r0;
        javax.servlet.ServletRequest r1;
        javax.servlet.ServletResponse r2;
        int $i0;
        java.util.Random $r3;
«FOREACH (List[WebService])services() AS service ITERATOR serviceIterator-»
        «service.implementationName()» $wsl«toIdentifier(service)»; «REM»local var for ws«ENDREM»
«ENDFOREACH»

«FOREACH (List[WebMethod])((List[WebService])services()).methods() AS method ITERATOR methodIterator -»
«FOREACH (List[Type])method.argTypes() AS param ITERATOR paramIterator-»
«EXPAND BeanFactory::beanLocals(param.localPrefix() + "_" + methodIterator.counter0 + "_" + paramIterator.counter0 ) FOR param-»«REM»Local var for each parameter value«ENDREM»
«ENDFOREACH»«ENDFOREACH»
        r0 := @this: «clazz»;
        r1 := @parameter0: javax.servlet.ServletRequest;
        r2 := @parameter1: javax.servlet.ServletResponse;
        $r3 = new java.util.Random;
«FOREACH (List[WebService])services() AS service ITERATOR serviceIterator-»«REM»Initialize locals«ENDREM»
        $wsl«toIdentifier(service)» = <«clazz»: «service.implementationName()» ws«toIdentifier(service)»>;
«ENDFOREACH»
        specialinvoke $r3.<java.util.Random: void <init>()>();
label0:
        $i0 = virtualinvoke $r3.<java.util.Random: int nextInt()>();
        tableswitch($i0)
        {
«FOREACH ((List[WebService])services()).methods() AS method ITERATOR iter»
            case «iter.counter0»: goto label«iter.counter0 + 2»;
«ENDFOREACH»
            default: goto label1;
          };

label1:
          return;
«FOREACH ((List[WebService])services()).methods() AS method ITERATOR methodIterator»
label«methodIterator.counter0 + 2»:
«FOREACH (List[Type])method.argTypes() AS param ITERATOR paramIterator-»
«EXPAND BeanFactory::initializeLocal(clazz, param.localPrefix() + "_" + methodIterator.counter0 + "_" + paramIterator.counter0 ) FOR param-»«REM»Local var for each parameter value«ENDREM»
«ENDFOREACH-»
        staticinvoke <«method.service.wrapperName»: «method.retType» «method.name»(«FOREACH method.argTypes() AS param SEPARATOR ','»«param»«ENDFOREACH»)>(«FOREACH (List[Type])method.argTypes() AS param ITERATOR iter3 SEPARATOR ','»«param.localPrefix()»_«methodIterator.counter0»_«iter3.counter0» «ENDFOREACH»);
        goto label0;
«ENDFOREACH-»
    }
}
«ENDFILE»
«ENDDEFINE»