«IMPORT soot::jimple::toolkits::javaee::model::servlet»
«IMPORT soot::jimple::toolkits::javaee::model::ws»

«EXTENSION soot::jimple::toolkits::javaee::templates::ws::Utils»

«DEFINE wsServlet FOR Servlet»
«ENDDEFINE»

«DEFINE wsServlet FOR WsServlet»
«FOREACH (List[WebService])services() AS service»
«FILE toIdentifier(service) + "Wrapper.jimple"»
public class «toIdentifier(service)»Wrapper extends java.lang.Object
{

«FOREACH (List[WebMethod])service.methods() AS method»
  public static «method.retType» «method.name»(«FOREACH method.argTypes() AS param SEPARATOR ','»«param»«ENDFOREACH»)
  {
«FOREACH method.argTypes() AS param ITERATOR iter»
  «param» r«iter.counter0»;
«ENDFOREACH»
    «service.implementationName()» $wsl«toIdentifier(service)»;
    «method.retType» $retVal;
«FOREACH method.argTypes() AS param ITERATOR iter»
    r«iter.counter0» := @parameter«iter.counter0»: «param»;
«ENDFOREACH»
    $wsl«toIdentifier(service)» = <«clazz»: «service.implementationName()» ws«toIdentifier(service)»>;
    retval = invokevirtual $wsl«toIdentifier(service)».«method.targetMethodName»(«FOREACH method.argTypes() AS param ITERATOR iter SEPARATOR ','»r«iter.counter0»«ENDFOREACH»);
    return retval; //this is gonna be a problem with void calls
}

  public static javax.xml.ws.Response «method.name»Async(«FOREACH method.argTypes() AS param SEPARATOR ','»«param»«ENDFOREACH»)
  {
«FOREACH method.argTypes() AS param ITERATOR iter»
    «param» r«iter.counter0»;
«ENDFOREACH»
    «service.implementationName()» $wsl«toIdentifier(service)»;
    «method.retType» $retVal;
    soot.javaee.stubs.jaxws.ResponseWrapper $wrapRet;

«FOREACH method.argTypes() AS param ITERATOR iter»
    r«iter.counter0» := @parameter«iter.counter0»: «param»;
«ENDFOREACH»
    $wsl«toIdentifier(service)» = <«clazz»: «service.implementationName()» ws«toIdentifier(service)»>;
    retval = invokevirtual $wsl«toIdentifier(service)».«method.targetMethodName»(«FOREACH method.argTypes() AS param ITERATOR iter SEPARATOR ','»r«iter.counter0»«ENDFOREACH»);
    $wrapRet = new soot.javaee.stubs.jaxws.ResponseWrapper;
    wrapRet.init(retVal);
    return wrapRet;
  }

  public static java.util.concurrent.Future «method.name»Async(«FOREACH method.argTypes() AS param SEPARATOR ','»«param»«ENDFOREACH»,javax.xml.ws.AsyncHandler)
  {
«FOREACH method.argTypes() AS param ITERATOR iter»
    «param» r«iter.counter0»;
«ENDFOREACH»
    javax.xml.ws.AsyncHandler handler;
    «service.implementationName()» $wsl«toIdentifier(service)»;
    «method.retType» $retVal;
    soot.javaee.stubs.jaxws.FutureWrapper $wrapRet;

«FOREACH method.argTypes() AS param ITERATOR iter»
    r«iter.counter0» := @parameter«iter.counter0»: «param»;
«ENDFOREACH»

    handler := @parameter«method.argTypes().size»: javax.xml.ws.AsyncHandler;
    $wsl«toIdentifier(service)» = <«clazz»: «service.implementationName()» ws«toIdentifier(service)»>;
    $retVal = invokevirtual $wsl«toIdentifier(service)».«method.targetMethodName»(«FOREACH method.argTypes() AS param ITERATOR iter SEPARATOR ','»r«iter.counter0»«ENDFOREACH»);
    $wrapRet = new soot.javaee.stubs.jaxws.FutureWrapper;
    $wrapRet.init($retVal);
    handler.handleResponse($wrapRet);
    return wrapRet;
  }

«ENDFOREACH»

}
«ENDFILE»
«ENDFOREACH»
«ENDDEFINE»

«DEFINE main FOR Web»
«EXPAND wsServlet FOREACH servlets»
«ENDDEFINE»
