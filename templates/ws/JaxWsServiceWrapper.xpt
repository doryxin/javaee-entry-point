«IMPORT soot::jimple::toolkits::javaee::model::servlet»
«IMPORT soot::jimple::toolkits::javaee::model::ws»

«EXTENSION soot::jimple::toolkits::javaee::templates::ws::Utils»

«DEFINE main FOR Web»
«EXPAND wsServlet(this) FOREACH servlets»
«ENDDEFINE»

«DEFINE wsServlet(Web web) FOR Servlet»
«ENDDEFINE»

«DEFINE wsServlet(Web web) FOR WsServlet»
«FOREACH (List[WebService])services() AS service»
«FILE wrapperFileName(web,service)»
public class «wrapperClassName(web,service)» extends java.lang.Object
{

«FOREACH (List[WebMethod])service.methods() AS method-»
«IF ""+method.retType == "void"»
  public static «method.retType» «method.name»(«FOREACH method.argTypes() AS param SEPARATOR ','»«param»«ENDFOREACH»)
  {
«FOREACH method.argTypes() AS param ITERATOR iter-»
    «param» «localPrefix(param)»«iter.counter0»;
«ENDFOREACH-»
    «service.implementationName()» $wsl«toIdentifier(service)»;
«FOREACH method.argTypes() AS param ITERATOR iter-»
    «localPrefix(param)»«iter.counter0» := @parameter«iter.counter0»: «param»;
«ENDFOREACH-»
    $wsl«toIdentifier(service)» = <«clazz»: «service.implementationName()» ws«toIdentifier(service)»>;
    virtualinvoke $wsl«toIdentifier(service)».<«service.implementationName()»: «method.retType» «method.targetMethodName»(«FOREACH method.argTypes() AS param ITERATOR iter SEPARATOR ','»«param»«ENDFOREACH»)>(«FOREACH method.argTypes() AS param ITERATOR iter SEPARATOR ','»«localPrefix(param)»«iter.counter0»«ENDFOREACH»);
  }
«ELSE»
  public static «method.retType» «method.name»(«FOREACH method.argTypes() AS param SEPARATOR ','»«param»«ENDFOREACH»)
  {
«FOREACH method.argTypes() AS param ITERATOR iter-»
    «param» «localPrefix(param)»«iter.counter0»;
«ENDFOREACH-»
    «service.implementationName()» $wsl«toIdentifier(service)»;
    «method.retType» $retVal;
«FOREACH method.argTypes() AS param ITERATOR iter»
    «localPrefix(param)»«iter.counter0» := @parameter«iter.counter0»: «param»;
«ENDFOREACH-»
    $wsl«toIdentifier(service)» = <«clazz»: «service.implementationName()» ws«toIdentifier(service)»>;
    $retVal = virtualinvoke $wsl«toIdentifier(service)».<«service.implementationName()»: «method.retType» «method.targetMethodName»(«FOREACH method.argTypes() AS param ITERATOR iter SEPARATOR ','»«param»«ENDFOREACH»)>(«FOREACH method.argTypes() AS param ITERATOR iter SEPARATOR ','»«localPrefix(param)»«iter.counter0»«ENDFOREACH»);
    return $retVal;
  }
«ENDIF»

«IF ""+method.retType != "void"»
  public static javax.xml.ws.Response «method.name»Async(«FOREACH method.argTypes() AS param SEPARATOR ','»«param»«ENDFOREACH»)
  {
«FOREACH method.argTypes() AS param ITERATOR iter-»
    «param» «localPrefix(param)»«iter.counter0»;
«ENDFOREACH-»
    «service.implementationName()» $wsl«toIdentifier(service)»;
    «method.retType» $retVal;
    soot.javaee.stubs.jaxws.ResponseWrapper $wrapRet;

«FOREACH method.argTypes() AS param ITERATOR iter»
    «localPrefix(param)»«iter.counter0» := @parameter«iter.counter0»: «param»;
«ENDFOREACH-»
    $wsl«toIdentifier(service)» = <«clazz»: «service.implementationName()» ws«toIdentifier(service)»>;
    $retVal = virtualinvoke $wsl«toIdentifier(service)».<«service.implementationName()»: «method.retType» «method.targetMethodName»(«FOREACH method.argTypes() AS param ITERATOR iter SEPARATOR ','»«param»«ENDFOREACH»)>(«FOREACH method.argTypes() AS param ITERATOR iter SEPARATOR ','»«localPrefix(param)»«iter.counter0»«ENDFOREACH»);    $wrapRet = new soot.javaee.stubs.jaxws.ResponseWrapper;
    specialinvoke $wrapRet.<«service.implementationName()»: void <init>(«method.retType»)>($retVal);
    return $wrapRet;
  }

«IF method.argTypes().size == 0»
  public static java.util.concurrent.Future «method.name»Async(javax.xml.ws.AsyncHandler)
  {
«ELSE»
  public static java.util.concurrent.Future «method.name»Async(«FOREACH method.argTypes() AS param SEPARATOR ','»«param»«ENDFOREACH»,javax.xml.ws.AsyncHandler)
  {
«ENDIF»
«FOREACH method.argTypes() AS param ITERATOR iter-»
    «param» «localPrefix(param)»«iter.counter0»;
«ENDFOREACH-»
    javax.xml.ws.AsyncHandler handler;
    «service.implementationName()» $wsl«toIdentifier(service)»;
    «method.retType» $retVal;
    soot.javaee.stubs.jaxws.FutureWrapper $wrapRet;

«FOREACH method.argTypes() AS param ITERATOR iter»
    «localPrefix(param)»«iter.counter0» := @parameter«iter.counter0»: «param»;
«ENDFOREACH-»

    handler := @parameter«method.argTypes().size»: javax.xml.ws.AsyncHandler;
    $wsl«toIdentifier(service)» = <«clazz»: «service.implementationName()» ws«toIdentifier(service)»>;
    $retVal = virtualinvoke $wsl«toIdentifier(service)».<«service.implementationName()»: «method.retType» «method.targetMethodName»(«FOREACH method.argTypes() AS param ITERATOR iter SEPARATOR ','»«param»«ENDFOREACH»)>(«FOREACH method.argTypes() AS param ITERATOR iter SEPARATOR ','»«localPrefix(param)»«iter.counter0»«ENDFOREACH»);    $wrapRet = new soot.javaee.stubs.jaxws.FutureWrapper;
    specialinvoke $wrapRet.<«service.implementationName()»: void <init>(«method.retType»)>($retVal);
    return $wrapRet;
  }
«ENDIF-»
«ENDFOREACH-»
}
«ENDFILE»
«ENDFOREACH»
«ENDDEFINE»


