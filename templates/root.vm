## main entry for template
#macro( generateMainClass )
#set( $classname = $main-package + "." + $main-class)
public class $classname extends java.lang.Object
{
  public void <init>()
  {
    $classname r0;

    r0 := @this: $classname;
    specialinvoke r0.<java.lang.Object: void <init>()>();
  }
  
  private static void init()
  {
#foreach($filter in $root.filters)
    staticinvoke <$main-package.$filter.clazz: void init()>();
#end

#foreach($servlet in $root.servlets)
    staticinvoke <$main-package.$servlet.clazz: void init()>();
#end
  }

  private static void service()
  {
    javax.servlet.http.HttpServletRequest $r0;
    javax.servlet.http.HttpServletResponse $r1;
    int $i0;
    java.util.Random $r2;

    $r2 = new java.util.Random;
    specialinvoke $r2.<java.util.Random: void <init>()>();

    label0:
      $i0 = virtualinvoke $r2.<java.util.Random: int nextInt()>();
      $r0 = new $servlet-request-impl;
      specialinvoke $r0.<$servlet-request-impl: void <init>()>();
      $r1 = new $servlet-response-impl;
      specialinvoke $r1.<$servlet-response-impl: void <init>()>();
      tableswitch($i0)
      {
#set($bound = $root.collectBoundAddresses())
#set($i = 2)
#foreach($address in $bound)
        case $i : goto label${i};
#set( $i = $i + 1 )
#end
        default: goto label1;
      };
      
    label1:
      return;
      
#set($i = 2)
#foreach($address in $bound)
     label$i:
        staticinvoke <#chainClassName($address 0): void filter(javax.servletServletRequest,javax.servletServletResponse)>($r0, $r1);
        goto label0;
        
#set($i = $i + 1)
#end
  }

  private static void destroy()
  {
#foreach($servlet in $root.servlets)
    staticinvoke <$main-package.$servlet.clazz: void destroy()>();
#end
    
#foreach($filter in $root.filters)
    staticinvoke <$main-package.$filter.clazz: void destroy()>();
#end
  }

  public static void main(java.lang.String[])
  {
    java.lang.String[] r0;

    r0 := @parameter0: java.lang.String[];
    staticinvoke <securibench.generated.ServletMain: void init()>();
    staticinvoke <securibench.generated.ServletMain: void service()>();
    staticinvoke <securibench.generated.ServletMain: void destroy()>();
  }
}
#end 

#macro( generateServletWrapper $servlet )
#set( $classname = $main-package + "." + $servlet.clazz ) 
public class $classname extends java.lang.Object
{
    private static $servlet.clazz instance;

    static void <clinit>()
    {
        <$classname: $servlet.clazz instance> = null;
    }

    public void <init>()
    {
      $classname r0;

      r0 := @this: $classname    ;
      specialinvoke r0.<java.lang.Object: void <init>()>();
    }
  
    public static void init()
    {
        $servlet.clazz $r0;
        $servlet-config-impl $r1;

        $r1 = new $servlet-config-impl;
        specialinvoke $r1.<$servlet-config-impl: void <init>()>();
        $r0 = new $servlet.clazz;
        specialinvoke $r0.<$servlet.clazz: void <init>()>();
        virtualinvoke $r0.<javax.servlet.GenericServlet: void init(javax.servlet.ServletConfig)>($r1);
        <$classname: $servlet.clazz instance> = $r0;
    }

    public static void service(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)
    {
        javax.servlet.http.HttpServletRequest r0;
        javax.servlet.http.HttpServletResponse r1;
        $servlet.clazz $r2;

        r0 := @parameter0: javax.servlet.http.HttpServletRequest;
        r1 := @parameter1: javax.servlet.http.HttpServletResponse;
        $r2 = <$classname: $servlet.clazz instance>;
        virtualinvoke $r2.<javax.servlet.http.HttpServlet: void service(javax.servlet.ServletRequest,javax.servlet.ServletResponse)>(r0, r1);
    }

    public static void destroy()
    {
        $servlet.clazz $r0;

        $r0 = <$classname: $servlet.clazz instance>;
        virtualinvoke $r0.<javax.servlet.GenericServlet: void destroy()>();
        $r0 = null;
        <$classname: $servlet.clazz instance> = $r0;
    }
}
#end

#macro( generateFilterWrapper $filter )
#set( $classname = $main-package + "." + $filter.clazz ) 
public class $classname extends java.lang.Object implements javax.servlet.Filter
{
    private static $filter.clazz instance;

    static void <clinit>()
    {
        <$classname: $filter.clazz instance> = null;
    }

    public void <init>()
    {
      $classname r0;

      r0 := @this: $classname;
      specialinvoke r0.<java.lang.Object: void <init>()>();
    }
  
    public static void init()
    {
        $filter.clazz $r0;
        $filter-config-impl $r1;

        $r1 = new $filter-config-impl;
        specialinvoke $r1.<$filter-config-impl: void <init>()>();
        $r0 = new $filter.clazz;
        specialinvoke $r0.<$filter.clazz: void <init>()>();
        virtualinvoke $r0.<javax.servlet.Filter: void init(javax.servlet.FilterConfig)>($r1);
        <$classname: $filter.clazz instance> = $r0;
    }

    public static void filter(javax.servlet.ServletRequest, javax.servlet.ServletResponse, javax.filter.FilterChain)
    {
        javax.servlet.ServletRequest r0;
        javax.servlet.ServletResponse r1;
        javax.servlet.FilterChain r2;
        $filter.clazz $r3;

        r0 := @parameter0: javax.servlet.ServletRequest;
        r1 := @parameter1: javax.servlet.ServletResponse;
        r2 := @parameter2: javax.servlet.FilterChain;
        $r3 = <$classname: $servlet.clazz instance>;
        virtualinvoke $r3.<javax.servlet.FilterChain: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse, javax.filter.FilterChain)>(r0, r1, r2);
    }

    public static void destroy()
    {
        $filter.clazz $r0;

        $r0 = <$classname: $filter.clazz instance>;
        virtualinvoke $r0.<javax.servlet.FilterChain: void destroy()>();
        $r0 = null;
        <$classname: $filter.clazz instance> = $r0;
    }
}
#end

## creates a wrapper for each servlet 
#macro( processServlets )
  #foreach($servlet in $root.servlets)
    #set( $fileContents = "#generateServletWrapper($servlet)" ) 
    #set( $fileName = $output-dir + $main-package + "." + $servlet.clazz + ".jimple" )
    $FileTool.fileWrite($fileName, $fileContents) 
  #end
#end

## creates a wrapper for each filter
#macro( processFilters )
  #foreach($filter in $root.filters)
    #set( $fileContents = "#generateFilterWrapper($filter)" ) 
    #set( $fileName = $output-dir + $main-package + "." + $filter.clazz + ".jimple" )
    $FileTool.fileWrite($fileName, $fileContents) 
  #end
#end

#macro( generateServletChain $servlet )
#set( $classname = ${main-package} + "." + ${servlet.name.replace(".", "_")} + "Chain" )
public class $classname extends java.lang.Object implements javax.servlet.FilterChain
{
    public void <init>()
    {
      $classname r0;

      r0 := @this: $classname;
      specialinvoke r0.<java.lang.Object: void <init>()>();
    }
  
    public void doFilter(javax.servlet.ServletRequest, javax.servlet.ServletResponse)
    {
      $classname r0;
      javax.servlet.ServletRequest $r1;
      javax.servlet.ServletResponse $r2;
      javax.servlet.http.HttpServletRequest $r3;
      javax.servlet.http.HttpServletResponse $r4;

      r0 := @this: $classname;
      $r1 := @parameter0: javax.servlet.ServletRequest;
      $r2 := @parameter1: javax.servlet.ServletResponse;
      $r3 := (javax.servlet.http.HttpServletRequest) $r1;
      $r4 := (javax.servlet.http.HttpServletResponse) $r2;
      
      staticinvoke <$main-package.$servlet.clazz: void service(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>($r3, $r4);
    }
    
    public static void filter(javax.servlet.ServletRequest, javax.servlet.ServletResponse)
    {
      javax.servlet.ServletRequest r0;
      javax.servlet.ServletResponse r1;
      $classname $r2;
  
      r0 := @parameter0: javax.servlet.ServletRequest;
      r1 := @parameter1: javax.servlet.ServletResponse;
	  $r2 = new $classname;
      specialinvoke $r2.<$classname: void <init>()>();
      virtualinvoke $r2.<$classname: void doFilter(javax.servlet.ServletRequest, javax.servlet.ServletResponse)>(r0, r1);
    }
}
#end

#macro( generateFilterChain $classname $filterClassname $nextChainClassname )
public class $classname extends java.lang.Object implements javax.servlet.FilterChain
{
  public void <init>()
  {
    $classname r0;

    r0 := @this: $classname;
    specialinvoke r0.<java.lang.Object: void <init>()>();
  }
  
  public void doFilter(javax.servlet.ServletRequest, javax.servlet.ServletResponse)
  {
    $classname r0;
    javax.servlet.ServletRequest $r1;
    javax.servlet.ServletResponse $r2;
    $nextChainClassname $r3;

    r0 := @this: $classname;
    $r1 := @parameter0: javax.servlet.ServletRequest;
    $r2 := @parameter1: javax.servlet.ServletResponse;
    $r3 = new $nextChainClassname;
    specialinvoke $r0.<$nextChainClassname: void <init>()>();
      
    staticinvoke <$filterClassname: void filter(javax.servlet.ServletRequest,javax.servlet.ServletResponse)>($r1, $r2, $r3);
  }
 
  public static void filter(javax.servlet.ServletRequest, javax.servlet.ServletResponse)
  {
    javax.servlet.ServletRequest r0;
    javax.servlet.ServletResponse r1;
    $classname $r2;

    r0 := @parameter0: javax.servlet.ServletRequest;
    r1 := @parameter1: javax.servlet.ServletResponse;
    $r2 = new $classname;
    specialinvoke $r2.<$classname: void <init>()>();
    virtualinvoke $r2.<$classname: void doFilter(javax.servlet.ServletRequest, javax.servlet.ServletResponse)>(r0, r1);
  }
}
#end

#macro( chainClassName $address $start )
#set( $classname = $main-package + ".")
#foreach($filter in $address.filters)
#if($foreach.index >= $start)
#set( $classname = $classname + $filter.name + "_")
#end
#end
#set( $classname = $classname + ${address.servlet.name.replace(".", "_")} + "Chain" )
$classname#end

#macro( processAddress $address )
  #set($counter = 0)
  #foreach( $filter in $address.filters )
    #set( $currentClass = "#chainClassName( $address $counter )" )
    #set( $filterClass = $main-package + "." + $filter.clazz )
    #set( $nextIndex = $counter + 1 )
    #set( $nextClass = "#chainClassName( $address $nextIndex )" )
    #set( $fileContents = "#generateFilterChain($currentClass $filterClass $nextClass)" ) 
    #set( $fileName = $output-dir + $currentClass + ".jimple" )
    $FileTool.fileWrite($fileName, $fileContents) 
    #set( $counter = $counter + 1 )
  #end

  #set( $fileContents = "#generateServletChain($address.servlet)" ) 
  #set( $fileName = $output-dir + ${main-package} + "." + ${address.servlet.name.replace(".", "_")} + "Chain" + ".jimple" )
  $FileTool.fileWrite($fileName, $fileContents) 
#end

## walk down the uri tree and process each path that has an asocciated servlet
#macro( walkAddresses $address )
  #if( $address.servlet )
    #processAddress( $address )
  #end

  #foreach( $child in $address.children)
    #walkAddresses( $child )
  #end
#end

#processServlets()
#processFilters()

#walkAddresses($root.root)

#set( $fileContents = "#generateMainClass()" ) 
#set( $fileName = $output-dir + $main-package + "." + $main-class + ".jimple" )
$FileTool.fileWrite($fileName, $fileContents) 